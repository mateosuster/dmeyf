fill = clase_ternaria)) +
geom_bar(position = "fill")
prop.table(table(ds$cproductos , ds$clase_ternaria), margin = 1)
ds_cproductos <- dcast(ds, cproductos ~ clase_ternaria,
length,
value.var = "clase_ternaria" )
ds_cproductos[, ratio_baja2 := `BAJA+2` /  (`BAJA+1`+`BAJA+2`+CONTINUA)]
ds_cproductos[, lift := (ratio_baja2 / churn)]
ds_cproductos[, Ganancia :=  48750 * `BAJA+2` - 1250 * (CONTINUA + `BAJA+1`) ]
cat("Ganancia =",ds_cproductos[Ganancia > 0, sum(Ganancia)])
ggplot(ds, aes(x=mcuentas_saldo, color = clase_ternaria)) +
facet_grid(clase_ternaria ~ .) +
geom_density()
describe = describeBy(ds[,.(mcuentas_saldo, clase_ternaria)], group="clase_ternaria")
cat("Los clientes que continúan poseen un saldo en sus cuentas",
(( describe$"CONTINUA"$median[1]/describe$"BAJA+2"$median[1])-1 )*100,
"% mayor" )
iters = seq(from = min(ds$mcuentas_saldo), to = max(ds$mcuentas_saldo), by = 40000)
gcia_i = 0
rm( list=ls() )
gc(verbose = FALSE)
library( "data.table")
library("ggplot2")
carpeta_datasetsOri <-  "../../../datasetsOri/"
septiembre <- "paquete_premium_202009.csv"
ds <- fread(paste0(carpeta_datasetsOri, septiembre,collapse = ""), header=TRUE, showProgress = FALSE)
library(rpart)
arbol  <- rpart("clase_ternaria ~ .",
data = ds,
xval=0,
cp=0,
minsplit=  80,
minbucket=  1,
maxdepth=   5 )
arbol
library( "rpart.plot" )
prp( arbol, extra=101, digits=5, branch=1, type=4, varlen=0, faclen=0 )
tablahojas <- function (arbol, datos, target = "clase_ternaria") {
# Tomamos la columna con el target
target_vector <- datos[, get(target)]
# Tomamos las clases de nuestro target
classes <- unique(target_vector)
# Tomamos las posicion de las hojas que aplican a los registro de nuestro ds
row_leaf <- unique(arbol$where)
leaves <- data.table(row_frame = row_leaf)
setkey(leaves,row_frame)
# Relacion target ~ hojas
leaves_target <- dcast(
data.table(
target=target_vector,
leaf = arbol$where),
leaf ~ target, length,
value.var = "target")
setkey(leaves_target, leaf)
# Juntamos todo
leaves_target <- leaves_target[leaves,nomatch=0]
# Sumamos algunas columnas calculadas
colnames(leaves_target[,classes,with=FALSE])[apply(leaves_target[,classes,with=FALSE],1,which.max)]
# Clase mayoritaria
leaves_target[,
y:=colnames(
leaves_target[,classes,with=FALSE]
)[
apply(leaves_target[,classes,with=FALSE],1,which.max)]
]
# Cantidad de elementos de la hoja
leaves_target[, TOTAL := unlist(Reduce(function(a,b) Map(`+`,a,b), .SD)), .SDcols=classes]
leaves_target
}
hojas <- tablahojas(arbol, ds)
hojas[,]
hojas[, ganancia:= `BAJA+2`*48750 - 1250*(CONTINUA + `BAJA+1`)]
hojas
hojas[y == "BAJA+2", .(ganancia=sum(ganancia), enviados=sum(TOTAL), sevan=sum(`BAJA+2`))]
hojas[ganancia > 0, .(ganancia=sum(ganancia), enviados=sum(TOTAL), sevan=sum(`BAJA+2`))]
hojas[ganancia > 0, .N, by=y]
ds[, clase_binaria := ifelse(clase_ternaria == "BAJA+2", "evento", "noevento")]
# Sacamos la clase ternaria
ds[, clase_ternaria:= NULL]
arbolbinario <- rpart("clase_binaria ~ .",
data = ds,
xval=0,
cp=0,
minsplit=  80,
minbucket=  1,
maxdepth=   5 )
arbolbinario
hojasbinario <- tablahojas(arbolbinario, ds, "clase_binaria")
hojasbinario
hojasbinario[,]
hojasbinario[, ganancia:= evento*48750 - 1250*noevento]
hojasbinario[y == "evento", .(ganancia=sum(ganancia), enviados=sum(TOTAL), sevan=sum(evento))]
hojasbinario[ganancia > 0, .(ganancia=sum(ganancia), enviados=sum(TOTAL), sevan=sum(evento))]
hojasbinario[, c("p_evento","p_noevento"):= list(evento/TOTAL, noevento/TOTAL) ]
hojasbinario
hojasordenadas <- hojasbinario[order(-p_evento),]
hojasordenadas <- hojasordenadas[,.(evento=sum(evento),
noevento=sum(noevento),
n=sum(TOTAL),
ganancia=sum(ganancia)),by=p_evento]
hojasordenadas
hojasordenadas[, gan_acum:=cumsum(ganancia)]
hojasordenadas
ggplot(hojasordenadas, aes(x=p_evento ,y=gan_acum)) +
scale_x_reverse() +
geom_line(size=1)
hojasordenadas[, c("evento_acum","noevento_acum"):=list(cumsum(evento),cumsum(noevento))]
total_evento <- hojasordenadas[,sum(evento)]
total_noevento <- hojasordenadas[,sum(noevento)]
hojasordenadas[, c("evento_restantes","noevento_restantes"):=list(total_evento - evento_acum,total_noevento - noevento_acum )]
hojasordenadas[,tp:=evento_acum]
hojasordenadas[,tn:=noevento_restantes]
hojasordenadas[,fp:=noevento_acum]
hojasordenadas[,fn:=evento_restantes]
hojasordenadas[, .(p_evento, tp, tn, fp, fn)]
hojasordenadas[,tpr:=(tp/(tp+fn))]
hojasordenadas[,fpr:=(fp/(fp+tn))]
ggplot(hojasordenadas, aes(x=fpr,y=tpr)) +
geom_abline(intercept=0,slope=1) +
geom_line(lwd=1)
# install.packages("geometry")
library(geometry)
install.packages("geometry")
# install.packages("geometry")
library(geometry)
x <- c(hojasordenadas$fpr,1)
y <- c(hojasordenadas$tpr, 0)
polyarea(x, y)
hojasordenadas[, acc:= ((tp + tn)/(tp+tn+fp+fn))]
ggplot(hojasordenadas, aes(x=p_evento,y=acc)) +
geom_line(lwd=1) +
geom_vline(xintercept = 0.025, linetype="dotted")
# Se carga el archivo con las semillas
semillas <- as.vector(unlist(fread("cache/02_DT_semillas.txt")))
semillas
set.seed( semillas[1] )
particion <- ifelse( runif( nrow(ds) ) <  0.7, 1, 2 )
set.seed( semillas[1] )
inTraining <- caret::createDataPartition(ds$clase_binaria, p = 0.70, list = FALSE)
train  <-  ds[  inTraining, ]
test   <-  ds[ -inTraining, ]
modelo_oos <- rpart(clase_binaria ~ .,
data = train,
xval=0,
cp=0,
minsplit=  20,
minbucket=  1,
maxdepth=   5)
pred_training <- predict(modelo_oos, train , type = "prob")
pred_testing <- predict(modelo_oos, test , type = "prob")
library( "ROCR" )
library( "ROCR" )
# Train
roc_train <- ROCR::prediction(pred_training[,"evento"],
train$clase_binaria,
label.ordering=c( "noevento", "evento"))
auc_train  <-  ROCR::performance( roc_train,"auc");
roc_train <- ROCR::performance(roc_train,"tpr","fpr")
# Test
roc_test <- ROCR::prediction(  pred_testing[,"evento"],
test$clase_binaria,
label.ordering=c( "noevento", "evento"))
auc_test  <-  ROCR::performance( roc_test,"auc");
roc_test <- ROCR::performance(roc_test,"tpr","fpr")
plotdat_train <- data.frame(fpr=roc_train@x.values[[1]],tpr=roc_train@y.values[[1]],CUT=roc_train@alpha.values[[1]],etiqueta="TRAIN")
plotdat_test <- data.frame(fpr=roc_test@x.values[[1]],tpr=roc_test@y.values[[1]],CUT=roc_test@alpha.values[[1]],etiqueta="TEST")
plotdat <- rbind(plotdat_train,plotdat_test)
ggplot(plotdat, aes(x=fpr,y=tpr)) +
geom_abline(intercept=0,slope=1) +
geom_line(aes(colour = etiqueta), size = 1.2)
auc_train@y.values
auc_test@y.values
ganancia <- function(probabilidades, clase) {
return(sum(
(probabilidades >= 0.025) * ifelse( clase == "evento", 48750, -1250 ))
)
}
ganancia(pred_training[,"evento"], train$clase_binaria)
ganancia(pred_testing[,"evento"], test$clase_binaria)
ganancia(pred_training[,"evento"], train$clase_binaria) / 0.7
ganancia(pred_testing[,"evento"], test$clase_binaria) / 0.3
# Este chunk no se ejecuta automáticamente.
resultados <- data.table()
for( s in  semillas) {
set.seed( s )
inTraining <- caret::createDataPartition( ds[, get("clase_binaria")], p = 0.70, list = FALSE)
ds_training  <-  ds[  inTraining, ]
ds_testing   <-  ds[ -inTraining, ]
modelo_oos <- rpart(clase_binaria ~ ., data = ds_training,xval=0,
cp=0,
minsplit=  80,
minbucket=  1,
maxdepth=   5)
pred_training <- predict(modelo_oos, ds_training , type = "prob")
pred_testing <- predict(modelo_oos, ds_testing , type = "prob")
pred_testing <- as.data.frame(pred_testing)
pred_training <- as.data.frame(pred_training)
# Train
roc_train <- ROCR::prediction(  pred_training[,"evento"], ds_training$clase_binaria, label.ordering=c( "noevento", "evento"))
auc_train  <-  ROCR::performance( roc_train,"auc");
# Test
roc_test <- ROCR::prediction(  pred_testing[,"evento"], ds_testing$clase_binaria, label.ordering=c( "noevento", "evento"))
auc_test  <-  ROCR::performance( roc_test,"auc");
resultados <-   rbindlist(
list(resultados,
data.frame(semilla=s,type= "train",
auc=unlist(auc_train@y.values),
ganancia=ganancia(pred_training[,"evento"],
ds_training$clase_binaria)),
data.frame(semilla=s,type= "test",
auc=unlist(auc_test@y.values),
ganancia=ganancia(pred_testing[,"evento"], ds_testing$clase_binaria))
)
)
}
# Guardamos el resultado.
fwrite(resultados,"cache/02_DT__100_particiones.csv")
res_100_particions <- fread("cache/02_DT_100_particiones.csv")
min(res_100_particions[type == "test" & ganancia > 0, ganancia / 0.3])
max(res_100_particions[type == "test" & ganancia > 0, ganancia / 0.3])
ggplot(res_100_particions[type == "test",], aes(x=auc)) + geom_histogram()
ggplot(res_100_particions[type == "test",], aes(x=ganancia)) + geom_histogram()
rm( list=ls() )
gc(verbose = FALSE)
library( "data.table")
library("ggplot2")
carpeta_datasetsOri <-  "../../../datasetsOri/"
septiembre <- "paquete_premium_202009.csv"
ds <- fread(paste0(carpeta_datasetsOri, septiembre,collapse = ""), header=TRUE, showProgress = FALSE)
library(rpart)
arbol  <- rpart("clase_ternaria ~ .",
data = ds,
xval=0,
cp=0,
minsplit=  80,
minbucket=  1,
maxdepth=   5 )
arbol
library( "rpart.plot" )
prp( arbol, extra=101, digits=5, branch=1, type=4, varlen=0, faclen=0 )
tablahojas <- function (arbol, datos, target = "clase_ternaria") {
# Tomamos la columna con el target
target_vector <- datos[, get(target)]
# Tomamos las clases de nuestro target
classes <- unique(target_vector)
# Tomamos las posicion de las hojas que aplican a los registro de nuestro ds
row_leaf <- unique(arbol$where)
leaves <- data.table(row_frame = row_leaf)
setkey(leaves,row_frame)
# Relacion target ~ hojas
leaves_target <- dcast(
data.table(
target=target_vector,
leaf = arbol$where),
leaf ~ target, length,
value.var = "target")
setkey(leaves_target, leaf)
# Juntamos todo
leaves_target <- leaves_target[leaves,nomatch=0]
# Sumamos algunas columnas calculadas
colnames(leaves_target[,classes,with=FALSE])[apply(leaves_target[,classes,with=FALSE],1,which.max)]
# Clase mayoritaria
leaves_target[,
y:=colnames(
leaves_target[,classes,with=FALSE]
)[
apply(leaves_target[,classes,with=FALSE],1,which.max)]
]
# Cantidad de elementos de la hoja
leaves_target[, TOTAL := unlist(Reduce(function(a,b) Map(`+`,a,b), .SD)), .SDcols=classes]
leaves_target
}
hojas <- tablahojas(arbol, ds)
hojas
hojas[,]
hojas[, ganancia:= `BAJA+2`*48750 - 1250*(CONTINUA + `BAJA+1`)]
hojas
hojas[y == "BAJA+2", .(ganancia=sum(ganancia), enviados=sum(TOTAL), sevan=sum(`BAJA+2`))]
hojas[ganancia > 0, .(ganancia=sum(ganancia), enviados=sum(TOTAL), sevan=sum(`BAJA+2`))]
hojas[ganancia > 0, .N, by=y]
ds[, clase_binaria := ifelse(clase_ternaria == "BAJA+2", "evento", "noevento")]
# Sacamos la clase ternaria
ds[, clase_ternaria:= NULL]
arbolbinario <- rpart("clase_binaria ~ .",
data = ds,
xval=0,
cp=0,
minsplit=  80,
minbucket=  1,
maxdepth=   5 )
arbolbinario
hojasbinario <- tablahojas(arbolbinario, ds, "clase_binaria")
hojasbinario[,]
hojasbinario[, ganancia:= evento*48750 - 1250*noevento]
hojasbinario[y == "evento", .(ganancia=sum(ganancia), enviados=sum(TOTAL), sevan=sum(evento))]
hojasbinario[ganancia > 0, .(ganancia=sum(ganancia), enviados=sum(TOTAL), sevan=sum(evento))]
hojasbinario[, c("p_evento","p_noevento"):= list(evento/TOTAL, noevento/TOTAL) ]
hojasbinario
hojasordenadas <- hojasbinario[order(-p_evento),]
hojasordenadas
hojasordenadas <- hojasordenadas[,.(evento=sum(evento),
noevento=sum(noevento),
n=sum(TOTAL),
ganancia=sum(ganancia)),by=p_evento]
hojasordenadas
hojasordenadas[, gan_acum:=cumsum(ganancia)]
hojasordenadas
ggplot(hojasordenadas, aes(x=p_evento ,y=gan_acum)) +
scale_x_reverse() +
geom_line(size=1)
hojasordenadas[, c("evento_acum","noevento_acum"):=list(cumsum(evento),cumsum(noevento))]
total_evento <- hojasordenadas[,sum(evento)]
total_noevento <- hojasordenadas[,sum(noevento)]
hojasordenadas[, c("evento_restantes","noevento_restantes"):=list(total_evento - evento_acum,total_noevento - noevento_acum )]
hojasordenadas[,tp:=evento_acum]
hojasordenadas[,tn:=noevento_restantes]
hojasordenadas[,fp:=noevento_acum]
hojasordenadas[,fn:=evento_restantes]
hojasordenadas[, .(p_evento, tp, tn, fp, fn)]
hojasordenadas
total_evento
hojasordenadas[, .(p_evento, tp, tn, fp, fn)]
hojasordenadas
hojasordenadas[,tpr:=(tp/(tp+fn))]
hojasordenadas[,fpr:=(fp/(fp+tn))]
hojasordenadas
ggplot(hojasordenadas, aes(x=fpr,y=tpr)) +
geom_abline(intercept=0,slope=1) +
geom_line(lwd=1)
ggplot(hojasordenadas, aes(x=fpr,y=tpr)) +
geom_abline(intercept=0,slope=1) +
geom_line(lwd=2)
ggplot(hojasordenadas, aes(x=fpr,y=tpr)) +
geom_abline(intercept=0,slope=1) +
geom_line(lwd=1)
# install.packages("geometry")
library(geometry)
x <- c(hojasordenadas$fpr,1)
y <- c(hojasordenadas$tpr, 0)
polyarea(x, y)
y
x
hojasordenadas[, acc:= ((tp + tn)/(tp+tn+fp+fn))]
hojasordenadas
ggplot(hojasordenadas, aes(x=p_evento,y=acc)) +
geom_line(lwd=1) +
geom_vline(xintercept = 0.025, linetype="dotted")
hojasordenadas[, precision := tp/(tp+fp)]
hojasordenadas
hojasordenadas[, fscore := 2*((precision*tpr)/(precision+tpr))]
hojasordenadas
hojasordenadas[, .(p_evento, precision, tpr, fscore)]
hojasordenadas[, fscore2 := (1+2^2)*((precision*tpr)/(2^2*precision+tpr))]
hojasordenadas[, precision := tp/(tp+fp)]
hojasordenadas[, fscore := 2*((precision*tpr)/(precision+tpr))]
hojasordenadas[, fscore2 := (1+2^2)*((precision*tpr)/(2^2*precision+tpr))]
hojasordenadas[, fscore0.5 := (1+0.5^2)*((precision*tpr)/(0.5^2*precision+tpr))]
hojasordenadas[, .(p_evento, precision, tpr, fscore, fscore2, fscore0.5)]
ggplot(hojasordenadas, aes(x=p_evento)) +
geom_line(aes(y=precision)) +
geom_vline(xintercept = 0.025, linetype="dotted")
ggplot(hojasordenadas, aes(x=p_evento)) +
geom_line(aes(y=precision, color = precision)) +
geom_vline(xintercept = 0.025, linetype="dotted")
ggplot(hojasordenadas, aes(x=p_evento)) +
geom_line(aes(y=precision, color = "1")) +
geom_vline(xintercept = 0.025, linetype="dotted")
ggplot(hojasordenadas, aes(x=p_evento)) +
geom_line(aes(y=precision, color = "read")) +
geom_vline(xintercept = 0.025, linetype="dotted")
ggplot(hojasordenadas, aes(x=p_evento)) +
geom_line(aes(y=precision, color = "red")) +
geom_line(aes(y=fscore, color = "green")) +
geom_line(aes(y=fscore2, color = "blue")) +
geom_line(aes(y=fscore0.5, color = "grey")) +
geom_vline(xintercept = 0.025, linetype="dotted")
ggplot(hojasordenadas, aes(x=p_evento)) +
geom_line(aes(y=precision, color = "precision")) +
geom_line(aes(y=fscore, color = "fscore")) +
geom_line(aes(y=fscore2, color = "fscore_2")) +
geom_line(aes(y=fscore0.5, color = "fscore_0.5")) +
geom_vline(xintercept = 0.025, linetype="dotted")
ggplot(hojasordenadas, aes(x=p_evento)) +
geom_line(aes(y=precision, color = "precision")) +
geom_line(aes(y=fscore, color = "fscore")) +
geom_line(aes(y=tpr, color = "recall")) +
geom_line(aes(y=fscore2, color = "fscore_2")) +
geom_line(aes(y=fscore0.5, color = "fscore_0.5")) +
geom_vline(xintercept = 0.025, linetype="dotted")
ggplot(hojasordenadas, aes(x=p_evento)) +
geom_line(aes(y=fscore, color = "fscore")) +
geom_line(aes(y=fscore2, color = "fscore_2")) +
geom_line(aes(y=fscore0.5, color = "fscore_0.5")) +
geom_vline(xintercept = 0.025, linetype="dotted")
ggplot(hojasordenadas, aes(x=p_evento)) +
geom_line(aes(y=precision, color = "precision")) +
geom_line(aes(y=tpr, color = "recall"))
hojasordenadas[, precision := tp/(tp+fp)]
# β is chosen such that recall is considered β times as important as precision
hojasordenadas[, fscore := 2*((precision*tpr)/(precision+tpr))]
hojasordenadas[, fscore2 := (1+2^2)*((precision*tpr)/(2^2*precision+tpr))] #da más peso al recall
hojasordenadas[, fscore0.5 := (1+0.5^2)*((precision*tpr)/(0.5^2*precision+tpr))] # da mas peso a precision
hojasordenadas[, fscore1.5 := (1+1.5^2)*((precision*tpr)/(1.5^2*precision+tpr))]
hojasordenadas[, fscore0.25 := (1+0.25^2)*((precision*tpr)/(0.25^2*precision+tpr))]
hojasordenadas[, .(p_evento, precision, tpr, fscore, fscore2, fscore0.5)]
ggplot(hojasordenadas, aes(x=p_evento)) +
geom_line(aes(y=fscore, color = "fscore")) +
geom_line(aes(y=fscore2, color = "fscore_2")) +
geom_line(aes(y=fscore0.5, color = "fscore_0.5")) +
geom_line(aes(y=fscore1.5, color = "fscore1.5")) +
geom_line(aes(y=fscore0.25, color = "fscore0.25")) +
geom_vline(xintercept = 0.025, linetype="dotted")
ggplot(hojasordenadas, aes(x=p_evento)) +
geom_line(aes(y=precision, color = "precision")) +
geom_line(aes(y=tpr, color = "recall"))
# Se bajan los número aleatorios y se guardan en un archivo
# curl::curl_download("https://www.random.org/integer-sets/?sets=1&num=100&min=100000&max=1000000&commas=on&order=index&format=plain&rnd=new", "cache/02_DT_semillas.txt")
# Se carga el archivo con las semillas
semillas <- as.vector(unlist(fread("cache/02_DT_semillas.txt")))
semillas
set.seed( semillas[1] )
particion <- ifelse( runif( nrow(ds) ) <  0.7, 1, 2 )
lista = list()
lista
semillas[1:5]
cat(i)
for (i in semillas[1:5]){
cat(i)
}
prop.table(particion)
prop.table(table(particion))
for (i in semillas[1:5]){
set.seed(i)
particion <- ifelse( runif( nrow(ds) ) <  0.7, 1, 2 )
prop.table(table(particion))
cat("\n")
}
for (i in semillas[1:5]){
set.seed(i)
particion <- ifelse( runif( nrow(ds) ) <  0.7, 1, 2 )
cat(prop.table(table(particion)))
cat("\n")
}
set.seed( semillas[1] )
inTraining <- caret::createDataPartition(ds$clase_binaria, p = 0.70, list = FALSE)
train  <-  ds[  inTraining, ]
test   <-  ds[ -inTraining, ]
particion
ds[particion==1]
ds
ds[particion==1]
ds[particion==2]
ds[particion==1, .(clase_binaria)]
table(ds[particion==1, .(clase_binaria)])
for (i in semillas[1:5]){
set.seed(i)
particion <- ifelse( runif( nrow(ds) ) <  0.7, 1, 2 )
cat("semilla", i)
cat("prop train", prop.table(table(ds[particion==1, .(clase_binaria)])) )
cat("prop test", prop.table(table(ds[particion==2, .(clase_binaria)])) )
}
for (i in semillas[1:5]){
set.seed(i)
particion <- ifelse( runif( nrow(ds) ) <  0.7, 1, 2 )
cat("semilla", i)
cat("prop train", prop.table(table(ds[particion==1, .(clase_binaria)])), "\n" )
cat("prop test", prop.table(table(ds[particion==2, .(clase_binaria)])) "\n")
for (i in semillas[1:5]){
set.seed(i)
particion <- ifelse( runif( nrow(ds) ) <  0.7, 1, 2 )
cat("semilla", i)
cat("prop train", prop.table(table(ds[particion==1, .(clase_binaria)])), "\n" )
cat("prop test", prop.table(table(ds[particion==2, .(clase_binaria)])), "\n")
cat("\n")
}
for (i in semillas[1:5]){
set.seed(i)
particion <- ifelse( runif( nrow(ds) ) <  0.7, 1, 2 )
cat("semilla", i, "\n")
cat("prop train", prop.table(table(ds[particion==1, .(clase_binaria)])), "\n" )
cat("prop test", prop.table(table(ds[particion==2, .(clase_binaria)])), "\n")
cat("\n")
}
prop.table(table(ds[particion==1, .(clase_binaria)]))
for (i in semillas[1:5]){
set.seed(i)
particion <- ifelse( runif( nrow(ds) ) <  0.7, 1, 2 )
cat("semilla", i, "\n")
cat("prop train")
cat(prop.table(table(ds[particion==1, .(clase_binaria)])), "\n" )
cat("prop test", prop.table(table(ds[particion==2, .(clase_binaria)])), "\n")
cat("\n")
}
for (i in semillas[1:5]){
set.seed(i)
particion <- ifelse( runif( nrow(ds) ) <  0.7, 1, 2 )
cat("semilla", i, "\n")
cat("prop train")
cat(prop.table(table(ds[particion==1, .(clase_binaria)])))
cat("prop test", prop.table(table(ds[particion==2, .(clase_binaria)])), "\n")
cat("\n")
}
for (i in semillas[1:5]){
set.seed(i)
particion <- ifelse( runif( nrow(ds) ) <  0.7, 1, 2 )
cat("semilla", i, "\n")
cat("prop train", prop.table(table(ds[particion==1, .(clase_binaria)])), "\n" )
cat("prop test", prop.table(table(ds[particion==2, .(clase_binaria)])), "\n")
cat("\n")
}
6686+1040+1400
6686+1040+1400+1000
